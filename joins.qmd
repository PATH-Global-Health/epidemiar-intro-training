---
title: "Joining data in tidyverse"
---

Joining dataframes is a common task in data analysis, enabling you to combine datasets based on common keys. The `dplyr` package in the `tidyverse` provides several functions for different types of joins. This tutorial will focus on the `left_join()` function.

### Installing and Loading the `tidyverse` Package

First, ensure that you have the `tidyverse` package installed and loaded.

**Install the `tidyverse` package:**
```r
install.packages("tidyverse")
```

**Load the `tidyverse` package:**
```r
library(tidyverse)
```

### Example Dataframes

Let's create two example dataframes for illustration.

**Creating Dataframe 1:**
```r
df1 <- tibble(
  id = c(1, 2, 3, 4),
  name = c("Alice", "Bob", "Charlie", "David")
)
print(df1)
```

**Output:**
```
# A tibble: 4 × 2
     id name  
  <dbl> <chr> 
1     1 Alice 
2     2 Bob   
3     3 Charlie
4     4 David
```

**Creating Dataframe 2:**
```r
df2 <- tibble(
  id = c(1, 2, 4, 5),
  score = c(85, 90, 88, 92)
)
print(df2)
```

**Output:**
```
# A tibble: 4 × 2
     id score
  <dbl> <dbl>
1     1    85
2     2    90
3     4    88
4     5    92
```

### Using `left_join()`

The `left_join()` function combines rows from `df1` with matching rows from `df2`. If there is no match, the result will contain `NA` for the columns from `df2`.

**Syntax:**
```r
left_join(x, y, by = NULL, copy = FALSE, suffix = c(".x", ".y"), ...)
```
- `x`: The left dataframe.
- `y`: The right dataframe.
- `by`: A character vector of variables to join by. If `NULL`, defaults to all variables with common names in `x` and `y`.

**Example:**
```r
joined_df <- left_join(df1, df2, by = "id")
print(joined_df)
```

**Output:**
```
# A tibble: 4 × 3
     id name    score
  <dbl> <chr>   <dbl>
1     1 Alice      85
2     2 Bob        90
3     3 Charlie    NA
4     4 David      88
```

### Handling Different Column Names

If the key columns have different names in the dataframes, use the `by` argument to specify the columns to join by.

**Example with Different Column Names:**
```r
df3 <- tibble(
  student_id = c(1, 2, 4, 5),
  grade = c("A", "B", "B+", "A-")
)

joined_df2 <- left_join(df1, df3, by = c("id" = "student_id"))
print(joined_df2)
```

**Output:**
```
# A tibble: 4 × 3
     id name    grade
  <dbl> <chr>   <chr>
1     1 Alice   A    
2     2 Bob     B    
3     3 Charlie NA   
4     4 David   B+
```

### Conclusion

Using the `left_join()` function from the `dplyr` package in the `tidyverse`, you can easily join dataframes based on common keys. This is useful for combining related datasets and performing comprehensive data analysis. By understanding the basics of joins, you can leverage the power of `dplyr` to handle more complex data manipulations.
